#pragma once


#include <CGM/Global.hpp>
#include <CGM/Utils/Types/Number.hpp>


CGM_NAMESPACE_BEGIN

template<size_t D, typename T=FLOAT, typename = void> struct Size;

/* ####################################################################################### */
/* --------------------------------------------------------------------------------------- */
/* Size 2D */
/* --------------------------------------------------------------------------------------- */
/* ####################################################################################### */

template<size_t D, typename T>
struct Size <D, T, std::enable_if_t<(D == 2)>>
{
    CGM_RULE_OF_FIVE(Size)

/* ####################################################################################### */
public: /* Typedefs */
/* ####################################################################################### */

    using value_type    = T;

/* ####################################################################################### */
public: /* Attributes */
/* ####################################################################################### */

    Length<T> w;    ///< Width
    Length<T> h;    ///< Height

/* ####################################################################################### */
public: /* Constructors */
/* ####################################################################################### */

    /**
     * Initialize width and height.
     * @param width Width value.
     * @param height Height value.
     */
    constexpr
    Size(T width, T height);

    /**
     * Initialize width and height by the same value.
     */
    constexpr explicit
    Size(T value);
};

/* ####################################################################################### */
/* --------------------------------------------------------------------------------------- */
/* Size 3D */
/* --------------------------------------------------------------------------------------- */
/* ####################################################################################### */

template<size_t D, typename T>
struct Size <D, T, std::enable_if_t<(D == 3)>>
{
    CGM_RULE_OF_FIVE(Size)

/* ####################################################################################### */
public: /* Typedefs */
/* ####################################################################################### */

    using value_type    = T;

/* ####################################################################################### */
public: /* Attributes */
/* ####################################################################################### */

    Length<T> w;    ///< Width
    Length<T> h;    ///< Height
    Length<T> d;    ///< Depth

/* ####################################################################################### */
public: /* Constructors */
/* ####################################################################################### */

    /**
     * Initialize width, height and depth.
     * @param width Width value.
     * @param height Height value.
     * @param depth Depth value.
     */
    constexpr
    Size(T width, T height, T depth);

    /**
     * Initialize width, height and depth by the same value.
     * @param value Width, height and depth value.
     */
    constexpr explicit
    Size(T value);
};

CGM_NAMESPACE_END


#include "Size.inl"